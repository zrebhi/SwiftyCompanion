{"version":3,"file":"interpolation.js","sourceRoot":"","sources":["../src/interpolation.ts"],"names":[],"mappings":";;;AAEA,qDAA+C;AAE/C,SAAgB,qBAAqB,CAAC,EACpC,MAAM,EACN,OAAO,GAIR;IACC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,mFAAmF;QACnF,0GAA0G;QAC1G,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACtD,OAAO,IAAA,sBAAQ,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAChD,CAAC;QAED,wFAAwF;QACxF,8DAA8D;QAC9D,OAAO,MAAM,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;YAC/D,OAAO,GAAG,IAAA,sBAAQ,EAAC,UAAU,EAAE,OAAO,CAAC,EAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;QACjC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,qBAAqB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;IAClF,CAAC;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,EAAE,CAAC;QAChD,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;YAC3C,GAAG;YACH,qBAAqB,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;SAClD,CAAC,CACH,CAAC;IACJ,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA9BD,sDA8BC","sourcesContent":["import { JobInterpolationContext } from '@expo/eas-build-job';\n\nimport { jsepEval } from './utils/jsepEval.js';\n\nexport function interpolateJobContext({\n  target,\n  context,\n}: {\n  target: unknown;\n  context: JobInterpolationContext;\n}): unknown {\n  if (typeof target === 'string') {\n    // If the value is e.g. `build: ${{ inputs.build }}`, we will interpolate the value\n    // without changing `inputs.build` type, i.e. if it is an object it'll be like `build: {...inputs.build}`.\n    if (target.startsWith('${{') && target.endsWith('}}')) {\n      return jsepEval(target.slice(3, -2), context);\n    }\n\n    // Otherwise we replace all occurrences of `${{...}}` with the result of the expression.\n    // e.g. `echo ${{ build.profile }}` becomes `echo production`.\n    return target.replace(/\\$\\{\\{(.+?)\\}\\}/g, (_match, expression) => {\n      return `${jsepEval(expression, context)}`;\n    });\n  } else if (Array.isArray(target)) {\n    return target.map((value) => interpolateJobContext({ target: value, context }));\n  } else if (typeof target === 'object' && target) {\n    return Object.fromEntries(\n      Object.entries(target).map(([key, value]) => [\n        key,\n        interpolateJobContext({ target: value, context }),\n      ])\n    );\n  }\n  return target;\n}\n"]}